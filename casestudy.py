# -*- coding: utf-8 -*-
"""casestudy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1prX6GpgPcaJnFGqkIhUeGcUfgkKUqBQY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

user_data=pd.read_excel('/content/drive/MyDrive/casestudy/user_gameplay_data.xlsx')
deposit_data=pd.read_excel('/content/drive/MyDrive/casestudy/Deposite.xlsx')
withdrawal_data=pd.read_excel('/content/drive/MyDrive/casestudy/withdrawal.xlsx')

user_data.head()

deposit_data.head()

withdrawal_data.head()

user_data.shape

user_data.info()

user_data.isna().sum()

deposit_data.shape

deposit_data.info()

deposit_data.isna().sum()

withdrawal_data.shape

withdrawal_data.info()

withdrawal_data.isna().sum()

user_data.rename({'User ID': 'user_id','Datetime':'game_play_datetime','Games Played': 'games_played'}, axis=1, inplace=True)
deposit_data.rename({'User Id':'user_id','Datetime':'deposite_datetime','Amount':'deposite_amount'},axis=1,inplace=True)
withdrawal_data.rename({'User Id':'user_id','Datetime':'withdrawal_datetime','Amount':'withdrawal_amount'},axis=1,inplace=True)

user_data=user_data.sort_values(by='user_id',ascending=True)
deposit_data=deposit_data.sort_values(by='user_id',ascending=True)
withdrawal_data=withdrawal_data.sort_values(by='user_id',ascending=True)

total_users=pd.DataFrame(user_data.groupby('user_id')['games_played'].sum()).reset_index()
total_deposite=pd.DataFrame(deposit_data.groupby('user_id')['deposite_amount'].sum()).reset_index()
total_withdrawal=pd.DataFrame(withdrawal_data.groupby('user_id')['withdrawal_amount'].sum()).reset_index()

a=pd.merge(total_users,total_deposite,on='user_id')

df=pd.merge(a,total_withdrawal,on='user_id')

df.head()

#this expression for calculating total loyalty point but we want to calculated in slots that are expressbelow
df['Loyalty_point']=(0.01*df['deposite_amount'])+(0.005*df['withdrawal_amount'])+(0.001*abs(df['deposite_amount']-df['withdrawal_amount']))+(0.2*df['games_played'])

df.head()

user_data

from datetime import date,time
user_data['new_date'] = [d.date() for d in user_data['game_play_datetime']]
user_data['new_time'] = [d.time() for d in user_data['game_play_datetime']]

user_data

user_data['Year']=user_data['game_play_datetime'].dt.year
user_data['month']=user_data['game_play_datetime'].dt.month
user_data['day']=user_data['game_play_datetime'].dt.day
user_data['hours']=user_data['game_play_datetime'].dt.hour
user_data['minute']=user_data['game_play_datetime'].dt.minute
user_data['second']=user_data['game_play_datetime'].dt.second

"""#calculationg loyalty point for S1 slot"""

slot1_user_data=user_data[user_data['hours']<=12]

slot2_user_data=user_data[user_data['hours']>12]

slot1_user_data1=pd.DataFrame(slot1_user_data.groupby('user_id')['games_played'].sum()).reset_index()

c=pd.merge(slot1_user_data1,total_deposite,on='user_id')

d=pd.merge(c,total_withdrawal,on='user_id')

d

d['Loyalty_point']=(0.01*d['deposite_amount'])+(0.005*d['withdrawal_amount'])+(0.001*abs(d['deposite_amount']-d['withdrawal_amount']))+(0.2*d['games_played'])

d

"""##calculating loyalty point for slot2"""

slot2_user_data1=pd.DataFrame(slot2_user_data.groupby('user_id')['games_played'].sum()).reset_index()

e=pd.merge(slot2_user_data,total_deposite,on='user_id')

f=pd.merge(e,total_withdrawal,on='user_id')

f['Loyalty_point']=(0.01*f['deposite_amount'])+(0.005*f['withdrawal_amount'])+(0.001*abs(f['deposite_amount']-f['withdrawal_amount']))+(0.2*f['games_played'])

f.head()

""""Based on the above information and the data provided answer the following questions:
1. Find Playerwise Loyalty points earned by Players in the following slots:-

a. 2nd October Slot S1
"""

slot1_user_data.head()

October_Slot_S1=slot1_user_data.loc[slot1_user_data['month']==10]

October_2nd_Slot_S1 = October_Slot_S1[October_Slot_S1['day']==2]

October_2nd_Slot_S1.head(1)

October_2nd_Slot_S1=pd.DataFrame(October_2nd_Slot_S1.groupby('user_id')['games_played'].sum()).reset_index()

October_2nd_Slot_S1.head(2)

g=pd.merge(October_2nd_Slot_S1,total_deposite,on='user_id')

df2=pd.merge(g,total_withdrawal,on='user_id')

df2['Loyalty_point']=(0.01*df2['deposite_amount'])+(0.005*df2['withdrawal_amount'])+(0.001*abs(df2['deposite_amount']-df2['withdrawal_amount']))+(0.2*df2['games_played'])

df2.head()

"""18th October Slot S1"""

October_18th_Slot_S1 = October_Slot_S1[October_Slot_S1['day']==18]

October_18th_Slot_S1=pd.DataFrame(October_18th_Slot_S1.groupby('user_id')['games_played'].sum()).reset_index()

October_18th_Slot_S1.head(2)

h=pd.merge(October_18th_Slot_S1,total_deposite,on='user_id')

df3=pd.merge(h,total_withdrawal,on='user_id')

df3['Loyalty_point']=(0.01*df3['deposite_amount'])+(0.005*df3['withdrawal_amount'])+(0.001*abs(df3['deposite_amount']-df3['withdrawal_amount']))+(0.2*df3['games_played'])

df3.head()

"""16th October Slot S2"""

slot2_user_data.head()

October_Slot_S2=slot2_user_data.loc[slot2_user_data['month']==10]

October_16th_Slot_S2 = October_Slot_S2[October_Slot_S2['day']==16]

October_16th_Slot_S2.head(2)

October_16th_Slot_S2=pd.DataFrame(October_16th_Slot_S2.groupby('user_id')['games_played'].sum()).reset_index()

I=pd.merge(October_16th_Slot_S2,total_deposite,on='user_id')

df4=pd.merge(I,total_withdrawal,on='user_id')

df4['Loyalty_point']=(0.01*df4['deposite_amount'])+(0.005*df4['withdrawal_amount'])+(0.001*abs(df4['deposite_amount']-df4['withdrawal_amount']))+(0.2*df4['games_played'])

df4.head()

"""26th October Slot S2"""

October_26th_Slot_S2 = October_Slot_S2[October_Slot_S2['day']==26]

October_26th_Slot_S2.head(2)

October_26th_Slot_S2=pd.DataFrame(October_26th_Slot_S2.groupby('user_id')['games_played'].sum()).reset_index()

J=pd.merge(October_26th_Slot_S2,total_deposite,on='user_id')

df5=pd.merge(J,total_withdrawal,on='user_id')

df5['Loyalty_point']=(0.01*df5['deposite_amount'])+(0.005*df5['withdrawal_amount'])+(0.001*abs(df5['deposite_amount']-df5['withdrawal_amount']))+(0.2*df5['games_played'])

df5.head()

"""2. Calculate overall loyalty points earned and rank players on the basis of loyalty points in the month of October. 
     In case of tie, number of games played should be taken as the next criteria for ranking.
"""

user_data.head()

user_data['month'].unique()

#overall loyalty point we calculated above
df.head()

df['Rank_loyaltypoint'] = df['Loyalty_point'].rank(ascending=False)

df.head()

df['Rank_loyaltypoint'].duplicated().sum()

# no duplicated value in rank means there is no tie

"""3. What is the average deposit amount?
4. What is the average deposit amount per user in a month?
5. What is the average number of games played per user?"
"""

#What is the average deposit amount?
deposit_data['deposite_amount'].mean()

#What is the average deposit amount per user in a month?
avg_deposite=pd.DataFrame(deposit_data.groupby('user_id')['deposite_amount'].mean()).reset_index()
avg_deposite.head()

#What is the average number of games played per user?"
avg_game_users=pd.DataFrame(user_data.groupby('user_id')['games_played'].mean()).reset_index()
avg_game_users.head()

""""Part B - How much bonus should be allocated to leaderboard players?

After calculating the loyalty points for the whole month find out which 50 players are at the top of the leaderboard. The company has allocated a pool of Rs 50000 to be given away as bonus money to the loyal players.

Now the company needs to determine how much bonus money should be given to the players.

Should they base it on the amount of loyalty points? Should it be based on number of games? Or something else?

Thatâ€™s for you to figure out.

Suggest a suitable way to divide the allocated money keeping in mind the following points:
1. Only top 50 ranked players are awarded bonus
"""

df.head(2)

df=df.sort_values(by='Rank_loyaltypoint').head(50).copy()

df.head()

"""I prefer the bonus amount should be given on the basis of Loyalty_point because when we observed in data some player played more no of games but there loyalty point are low """

mul_factor=50000/sum(df['Loyalty_point'])

df['bonus_amount']=df['Loyalty_point']*mul_factor

df.head()

"""Would you say the loyalty point formula is fair or unfair?

Can you suggest any way to make the loyalty point formula more robust?"

----yes its a fair formula,but we closely observe the data that some of the player which are playing more number of games but there loyalty point are low may be because lower amount of deposite and withdrawal so we can increase the multiplication factor in no of games played (more than 0.2)
that will also increase the visibility of that players in terms of loyalty point
"""





